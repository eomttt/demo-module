{"version":3,"sources":["DragAndSelect/index.jsx","Home.jsx","dummy.js","TreeMultiSelector/index.jsx","App.js","serviceWorker.js","index.js"],"names":["DragAndSelectComponent","useState","selected","setSelected","childStyle","width","height","marginBottom","textAlign","display","userSelect","style","onSelectedItems","selectedDataKeys","console","log","id","color","map","childItem","data-select-key","backgroundColor","border","includes","Home","to","dummyCategories","title","subCategory","dummyInitial","dummyExceptions","dummyNotSelections","dummySelectedCategoryCallback","selectedIdListOnlyParent","selectedIdList","TreeMultiSelectorComponent","categories","initialSelectedIds","exceptionIds","notSelectionIds","handleSelectedCategories","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8PAGaA,EAAyB,WAAO,IAAD,EACVC,mBAAS,IADC,mBACnCC,EADmC,KACzBC,EADyB,KAEpCC,EAAa,CAAEC,MAAO,MAAOC,OAAQ,QAASC,aAAc,OAAQC,UAAW,SAAUC,QAAS,eAAgBC,WAAY,QAQpI,OACE,yBAAKC,MAAO,CAAEN,MAAO,OAAQC,OAAQ,WACnC,kBAAC,IAAD,CAAeM,gBAPS,SAACC,GAC3BC,QAAQC,IAAI,mBAAoBF,GAChCV,EAAY,YAAIU,MAJC,CAAC,CAAEG,GAAI,IAAKC,MAAO,OAAQ,CAAED,GAAI,IAAKC,MAAO,UAAY,CAAED,GAAI,IAAKC,MAAO,UAAY,CAAED,GAAI,IAAKC,MAAO,SAAW,CAAED,GAAI,IAAKC,MAAO,SAWtIC,KAAI,SAACC,GACd,OACE,yBAAKR,MAAOP,GACV,yBACEgB,kBAAiBD,EAAUH,GAC3BL,MAAO,CACLN,MAAO,MACPC,OAAQ,OACRe,gBAAiBF,EAAUF,MAC3BK,OAAO,aAAD,OAAepB,EAASqB,SAASJ,EAAUH,IAAM,QAAU,iBAGlEG,EAAUH,WC1BhBQ,EAAO,kBAClB,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,wBAAT,wBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,oBAAT,uB,iBCVKC,EAAkB,CAC7B,CACEV,GAAI,EACJW,MAAO,IACPC,YAAa,CACX,CACEZ,GAAI,GACJW,MAAO,MACPC,YAAa,CACX,CACEZ,GAAI,IACJW,MAAO,SAET,CACEX,GAAI,IACJW,MAAO,SAET,CACIX,GAAI,IACJW,MAAO,WAIf,CACEX,GAAI,GACJW,MAAO,MACPC,YAAa,CACX,CACEZ,GAAI,IACJW,MAAO,SAET,CACEX,GAAI,IACJW,MAAO,aAMjB,CACEX,GAAI,EACJW,MAAO,IACPC,YAAa,CACX,CACEZ,GAAI,GACJW,MAAO,MACPC,YAAa,CACX,CACEZ,GAAI,IACJW,MAAO,QACPC,YAAa,QAMvB,CACEZ,GAAI,EACJW,MAAO,IACPC,YAAa,KAIJC,EAAe,GACfC,EAAkB,GAClBC,EAAqB,GAErBC,EAAgC,SAACC,EAA0BC,GACtEpB,QAAQC,IAAI,yCAA0CkB,GACtDnB,QAAQC,IAAI,+BAAgCmB,IC3DjCC,EAA6B,kBACxC,kBAAC,IAAD,CACEC,WAAYV,EACZW,mBAAoBR,EACpBS,aAAcR,EACdS,gBAAiBR,EACjBS,yBAA0BR,KCIfS,MAVf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAUC,gBACvB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC,kBAAC,IAAD,CAAOqB,KAAK,uBAAuBC,UAAWX,IAC9C,kBAAC,IAAD,CAAOU,KAAK,mBAAmBC,UAAW9C,MCH5B+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.f24889c5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport DragAndSelect from 'react-dragandselect';\n\nexport const DragAndSelectComponent = () => {\n  const [selected, setSelected] = useState([]);\n  const childStyle = { width: '50%', height: '100px', marginBottom: '40px', textAlign: 'center', display: 'inline-block', userSelect: 'none' };\n  const childItems = [{ id: '1', color: 'red'}, { id: '2', color: 'orange' }, { id: '3', color: 'yellow' }, { id: '4', color: 'green' }, { id: '5', color: 'blue' }]\n\n  const handleSelectedItems = (selectedDataKeys) => {\n    console.log(\"selectedDataKeys\", selectedDataKeys);\n    setSelected([...selectedDataKeys]);\n  }\n\n  return (\n    <div style={{ width: '100%', height: '1000px'}}>\n      <DragAndSelect onSelectedItems={handleSelectedItems}>\n        {\n          childItems.map((childItem) => {\n            return (\n              <div style={childStyle}>\n                <div\n                  data-select-key={childItem.id}\n                  style={{\n                    width: '50%',\n                    height: '100%',\n                    backgroundColor: childItem.color,\n                    border: `5px solid ${selected.includes(childItem.id) ? 'black' : 'transparent'}`\n                  }}\n                >\n                  {childItem.id}\n                </div>\n              </div>\n            );\n          })\n        }\n      </DragAndSelect>\n    </div>\n  )\n}","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nexport const Home = () => (\n  <div>\n    <ul>\n      <li>\n        <Link to=\"/tree-multi-selector\">tree-multi-selector</Link>\n      </li>\n      <li>\n        <Link to=\"/drag-and-select\">drag-and-select</Link>\n      </li>\n    </ul>\n  </div>\n)","export const dummyCategories = [\n  {\n    id: 1,\n    title: '1',\n    subCategory: [\n      {\n        id: 11,\n        title: '1-1',\n        subCategory: [\n          {\n            id: 111,\n            title: '1-1-1',\n          },\n          {\n            id: 112,\n            title: '1-1-2',\n          },\n          {\n              id: 113,\n              title: '1-1-3',\n          }\n        ]\n      },\n      {\n        id: 12,\n        title: '1-2',\n        subCategory: [\n          {\n            id: 121,\n            title: '1-2-1',\n          },\n          {\n            id: 122,\n            title: '1-2-2',\n          }\n        ]\n      }\n    ]\n  },\n  {\n    id: 2,\n    title: '2',\n    subCategory: [\n      {\n        id: 21,\n        title: '2-1',\n        subCategory: [\n          {\n            id: 211,\n            title: '2-1-1',\n            subCategory: [],\n          }\n        ]\n      }\n    ]\n  },\n  {\n    id: 3,\n    title: '3',\n    subCategory: []\n  }\n]\n\nexport const dummyInitial = [];\nexport const dummyExceptions = [];\nexport const dummyNotSelections = [];\n\nexport const dummySelectedCategoryCallback = (selectedIdListOnlyParent, selectedIdList) => {\n  console.log('[MULTI_SELECT]selectedIdListOnlyParent', selectedIdListOnlyParent);\n  console.log('[MULTI_SELECT]selectedIdList', selectedIdList);\n}","import React from 'react';\nimport ReactTreeMultiSelector from 'react-tree-multi-selector';\nimport {\n  dummyCategories,\n  dummyInitial,\n  dummyExceptions,\n  dummyNotSelections,\n  dummySelectedCategoryCallback\n} from '../dummy.js'\n\nexport const TreeMultiSelectorComponent = () => (\n  <ReactTreeMultiSelector\n    categories={dummyCategories}\n    initialSelectedIds={dummyInitial}\n    exceptionIds={dummyExceptions}\n    notSelectionIds={dummyNotSelections}\n    handleSelectedCategories={dummySelectedCategoryCallback}\n  />\n)","import React from 'react';\nimport {\n  BrowserRouter,\n  Route,\n} from \"react-router-dom\";\nimport { DragAndSelectComponent } from './DragAndSelect';\nimport { Home } from './Home';\nimport { TreeMultiSelectorComponent } from './TreeMultiSelector';\n\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/tree-multi-selector\" component={TreeMultiSelectorComponent} />\n      <Route path=\"/drag-and-select\" component={DragAndSelectComponent}/>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}